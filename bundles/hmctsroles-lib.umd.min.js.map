{"version":3,"sources":["ng://hmctsroles-lib/lib/hmctsroles-lib.service.ts","ng://hmctsroles-lib/lib/hmctsroles-lib.component.ts","ng://hmctsroles-lib/lib/directives/roles.directive.ts","ng://hmctsroles-lib/lib/directives/unless-role-includes.directive.ts","ng://hmctsroles-lib/lib/hmctsroles-lib.module.ts"],"names":["HmctsrolesLibService","cookieService","this","prototype","getUserRoles","roles","ck","get","split","Injectable","args","providedIn","CookieService","HmctsrolesLibComponent","ngOnInit","Component","selector","template","styles","RolesDirective","viewContainerRef","templateRef","auth","Object","defineProperty","value","_roleAccess","console","log","_roleList","_roleSource","checkRoleisValid","createEmbeddedView","clear","_this","some","r","includes","Directive","ViewContainerRef","TemplateRef","Input","UnlessRoleIncludesDirective","elr","authorised","roleList","nativeElement","style","visibility","unlessRole","ElementRef","HmctsrolesLibModule","NgModule","imports","CookieModule","forRoot","declarations","exports"],"mappings":"oTAAA,IAAAA,EAAA,WAQE,SAAAA,EACUC,GAAAC,KAAAD,cAAAA,SAUHD,EAAAG,UAAAC,wBACL,IAAIC,EAAQ,GACRC,EAAKJ,KAAKD,cAAcM,IAAI,aAGhC,OAFU,MAAND,IAAYD,EAAQC,EAAGE,MAAM,MAE1BH,uBArBVI,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDAHLC,EAAAA,iJADT,GCAAC,EAAA,WAaE,SAAAA,YAEAA,EAAAV,UAAAW,SAAA,iCAbDC,EAAAA,UAASL,KAAA,CAAC,CACTM,SAAU,uBACVC,SAAU,uDAKVC,OAAQ,+CATV,GCAAC,EAAA,WA2CE,SAAAA,EACUC,EACAC,EACAC,GAFApB,KAAAkB,iBAAAA,EACAlB,KAAAmB,YAAAA,EACAnB,KAAAoB,KAAAA,kBANE,SAxBZC,OAAAC,eACIL,EAAAhB,UAAA,aAAU,KADd,SACesB,GACbvB,KAAKwB,YAAcD,EACnBE,QAAQC,IAAI,eAAgBH,oCAK9BF,OAAAC,eACIL,EAAAhB,UAAA,qBAAkB,KADtB,SACuBsB,GACrBvB,KAAK2B,UAAYJ,EACjBE,QAAQC,IAAI,aAAcH,oCAM5BF,OAAAC,eACIL,EAAAhB,UAAA,uBAAoB,KADxB,SACyBsB,GACvBvB,KAAK4B,YAAcL,EACnBE,QAAQC,IAAI,eAAgBH,oCAa9BN,EAAAhB,UAAAW,SAAA,WAG0B,UAApBZ,KAAK4B,YACP5B,KAAKG,MAAQH,KAAKoB,KAAKlB,eAEvBF,KAAKG,MAAQH,KAAK2B,UAGP3B,KAAK6B,mBAGhB7B,KAAKkB,iBAAiBY,mBAAmB9B,KAAKmB,aAG9CnB,KAAKkB,iBAAiBa,SAK1Bd,EAAAhB,UAAA4B,iBAAA,WAAA,IAAAG,EAAAhC,KACE,OAAOA,KAAKG,MAAM8B,KAAK,SAAAC,GAAK,OAAAF,EAAKR,YAAYW,SAASD,0BA9DzDE,EAAAA,UAAS5B,KAAA,CAAC,CACTM,SAAU,4DARCuB,EAAAA,wBAAkBC,EAAAA,mBAEtBxC,yCAaNyC,EAAAA,kCAQAA,EAAAA,oCASAA,EAAAA,WAjCH,GCAAC,EAAA,WAcE,SAAAA,EACUC,EACArB,GADApB,KAAAyC,IAAAA,EACAzC,KAAAoB,KAAAA,SAMVoB,EAAAvC,UAAAW,SAAA,WAEE,IAAI8B,EACJ1C,KAAKG,MAAQH,KAAK2C,SAASrC,MAAM,KAEjCoC,EAAa1C,KAAK6B,mBAGhB7B,KAAKyC,IAAIG,cAAcC,MAAMC,WAD3BJ,EACwC,SAGA,WAO9CF,EAAAvC,UAAA4B,iBAAA,WAAA,IAAAG,EAAAhC,KACE,OAAOA,KAAKG,MAAM8B,KAAK,SAAAC,GAAK,OAAAF,EAAKe,WAAWzC,MAAM,KAAK6B,SAASD,0BArCnEE,EAAAA,UAAS5B,KAAA,CAAC,CACTM,SAAU,4DALQkC,EAAAA,kBACXlD,yCAQNyC,EAAAA,wBACAA,EAAAA,0BACAA,EAAAA,WAXH,GCAAU,EAAA,oDAMCC,EAAAA,SAAQ1C,KAAA,CAAC,CACR2C,QAAS,CACPC,EAAAA,aAAaC,WAEfC,aAAc,CAAC3C,EAAwBM,EAAgBuB,GACvDe,QAAS,CAAC5C,EAAwBM,EAAgBuB,SAXpD","sourcesContent":["import { Inject, Injectable } from '@angular/core';\r\nimport { CookieService } from 'ngx-cookie';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class HmctsrolesLibService {\r\n\r\n  constructor(\r\n    private cookieService: CookieService) { }\r\n\r\n\r\n\r\n  // public getUserRoles(): string[] {\r\n  //   let roles = ['roleA', 'roleB', 'roleC']\r\n  //   return roles\r\n  // }\r\n\r\n\r\n  public getUserRoles(): string[] {\r\n    let roles = [];\r\n    let ck = this.cookieService.get('__roles__');\r\n    if (ck != null) roles = ck.split(',');\r\n    //console.log('@@COOKIE:', roles)\r\n    return roles\r\n\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'hmcts-hmctsroles-lib',\n  template: `\n    <p>\n      hmctsroles-lib works!\n    </p>\n  `,\n  styles: []\n})\nexport class HmctsrolesLibComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import {\r\n  Directive, ViewContainerRef, TemplateRef, Input, OnInit\r\n} from \"@angular/core\";\r\nimport { HmctsrolesLibService } from \"../hmctsroles-lib.service\";\r\n\r\n\r\n\r\n\r\n@Directive({\r\n  selector: \"[roleAccess]\"\r\n})\r\nexport class RolesDirective implements OnInit {\r\n  // @Input() roleAccess: string;\r\n  // @Input() roleAccessroleList: string;\r\n\r\n  private _roleAccess: string;\r\n  @Input()\r\n  set roleAccess(value: string) {\r\n    this._roleAccess = value;\r\n    console.log('roleAccess: ', value);\r\n  }\r\n\r\n\r\n  private _roleList: string[];\r\n  @Input()\r\n  set roleAccessRoleList(value: string[]) {\r\n    this._roleList = value;\r\n    console.log('roleList: ', value);\r\n  }\r\n\r\n\r\n\r\n  private _roleSource: string;\r\n  @Input()\r\n  set roleAccessRoleSource(value: string) {\r\n    this._roleSource = value;\r\n    console.log('roleSource: ', value);\r\n  }\r\n\r\n\r\n  isVisible = false;\r\n  roles: any[];\r\n\r\n  constructor(\r\n    private viewContainerRef: ViewContainerRef,\r\n    private templateRef: TemplateRef<any>,\r\n    private auth: HmctsrolesLibService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    let authorised\r\n\r\n    if (this._roleSource == 'cookie')\r\n      this.roles = this.auth.getUserRoles()\r\n    else\r\n      this.roles = this._roleList;\r\n\r\n\r\n    authorised = this.checkRoleisValid()\r\n\r\n    if (authorised)\r\n      this.viewContainerRef.createEmbeddedView(this.templateRef)\r\n\r\n    else\r\n      this.viewContainerRef.clear()\r\n\r\n  }\r\n\r\n\r\n  checkRoleisValid() {\r\n    return this.roles.some(r => this._roleAccess.includes(r))\r\n  }\r\n}\r\n","import { Directive, ElementRef, OnInit, Input, ViewContainerRef, TemplateRef } from '@angular/core';\r\nimport { HmctsrolesLibService } from '../hmctsroles-lib.service';\r\n\r\n\r\n@Directive({\r\n  selector: \"[unlessRole]\"\r\n})\r\nexport class UnlessRoleIncludesDirective implements OnInit {\r\n\r\n  @Input() unlessRole: string;\r\n  @Input() roleList: string;\r\n  @Input() roleSource: string;\r\n  roles: any;\r\n\r\n  constructor(\r\n    private elr: ElementRef,\r\n    private auth: HmctsrolesLibService\r\n  ) {\r\n\r\n  }\r\n\r\n\r\n  ngOnInit() {\r\n\r\n    let authorised\r\n    this.roles = this.roleList.split(',')\r\n\r\n    authorised = this.checkRoleisValid()\r\n    //console.log('auth', authorised)\r\n    if (authorised)\r\n      this.elr.nativeElement.style.visibility = 'hidden'\r\n\r\n    else\r\n      this.elr.nativeElement.style.visibility = 'visible'\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n  checkRoleisValid() {\r\n    return this.roles.some(r => this.unlessRole.split(',').includes(r))\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { HmctsrolesLibComponent } from './hmctsroles-lib.component';\nimport { RolesDirective } from './directives/roles.directive';\nimport { UnlessRoleIncludesDirective } from './directives/unless-role-includes.directive';\nimport { CookieModule } from 'ngx-cookie';\n\n@NgModule({\n  imports: [\n    CookieModule.forRoot()\n  ],\n  declarations: [HmctsrolesLibComponent, RolesDirective, UnlessRoleIncludesDirective],\n  exports: [HmctsrolesLibComponent, RolesDirective, UnlessRoleIncludesDirective]\n})\nexport class HmctsrolesLibModule { }\n"]}